#include<stdio.h>
#include<time.h>
#include<stdlib.h>
int a[15000],n,i,j,ch,temp,pos,value,index,x;
int RecursiveLS(int a[], int value, int index, int n)
{
    int pos = 0;
 
    if(index >= n)
    {
        return 0;
    }
 
    else if (a[index] == value)
    {
        pos = index + 1;
        return pos;
    }
 
    else
    {
        return RecursiveLS(a, value, index+1, n);
    }
    return pos;
}

int binarySearch(int a[], int low, int high, int x)
{
   
    if (low > high) {
        return -1;
    }
 
  
 
    int mid = (low + high)/2;   
    
 
    if (x == a[mid]) {
        return mid;
    }
 
   
    else if (x < a[mid]) {
        return binarySearch(a, low, mid - 1, x);
    }
 
  
    else {
        return binarySearch(a, mid + 1, high, x);
    }
}
void main()
{
	clock_t start,end;
	int low = 0, high = n - 1;
	
	printf("Enter the total elements in the array:\n");
    scanf("%d", &n);
 
    printf("Enter the array elements\n");
    for (int i = 0; i < n; i++)
    {
        scanf("%d", &a[i]);
    }
 
   
    while(1)
    {
	
   printf("1:Linear search\n2:Binary search\n");
	printf("select the choice\n");
	scanf("%d",&ch);

//	while(1)
//	{
	
			
			switch(ch)
			{
			
			case 1:
				{
				
		printf("Enter the element to search  ");
    scanf("%d", &value);
    start=clock();
    pos =  RecursiveLS(a, value, 0, n);
    for(j=0;j<50000;j++)
			{
				temp=38/600;
			}
			end=clock();
			if (pos != 0)
    {
        printf("the time taken to find key element %d number is %f secs\n",value,(((double)(end-start))/CLOCKS_PER_SEC));
			
    }
    else
    {
        printf("Element not found\n and the time required for worst case is %f secs \n",(((double)(end-start))/CLOCKS_PER_SEC));
    }
			
 
		}
		break;
		case 2:
				{
				printf("Enter the element to search  ");
    scanf("%d", &value);
			start=clock();
		
     int index = binarySearch(a, low, high, value);
		//	for(j=0;j<50000;j++)
		//	{
			//	temp=38/600;
		//	}
			end=clock();
			if (index != -1) {
      printf("the time taken to find key element %d number is %f secs\n",value,(((double)(end-start))/CLOCKS_PER_SEC));
			
 
    }
    else {
        printf("Element not found and the time required for worst case is %f secs \n",(((double)(end-start))/CLOCKS_PER_SEC));
    }
		
 
		}
		break;
		}
	}
}
